# Gerekli Kurulumlar
import os
import logging
from config import *
import random
from sorular import D_SORU, C_SORU
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# ============================ #

K_G = Client(
  "bot",
  api_id=API_ID,
  api_hash=API_HASH,
  bot_token=BOT_TOKEN
)

MOD = None

# Log KaydÄ± AlalÄ±m
logging.basicConfig(level=logging.INFO)


# Start Buttonu Ä°cin Def OluÅŸturalÄ±m :)
def button():
	BUTTON=[[InlineKeyboardButton(text=" Owner",url="t.me/ekipci")]]
	BUTTON+=[[InlineKeyboardButton(text="ğŸ“£ Kanal",url="https://t.me/ekipbotdestek")]]
	return InlineKeyboardMarkup(BUTTON)

# KullanÄ±cÄ± Start Komutunu KullanÄ±nca Selam'layalÄ±m :)
@K_G.on_message(filters.command("start"))
async def _(client, message):
	user = message.from_user # KullanÄ±cÄ±n KimliÄŸini AlalÄ±m

	await message.reply_text(text="**Merhaba {}!**\n\n__Ben Pyrogram Api Ä°le YazÄ±lmÄ±ÅŸ EÄŸlence Botuyum :)__\n\n**ğŸ“£ KanalÄ±ma KatÄ±lÄ±n =>** [LÃ¼tfen TÄ±klayÄ±n](https://t.me/tutkudestek)\nDoÄŸruluk mu? Cesaret mi? Oyuna baÅŸlamak iÃ§in komut => /dc".format(
		user.mention, # KullanÄ±cÄ±'nÄ±n AdÄ±
		),
	disable_web_page_preview=True, # Etiketin Ã–nizlemesi OlmamasÄ± Ä°cin KullanÄ±yoruz
	reply_markup=button() # ButtonlarÄ±mÄ±zÄ± Ekleyelim
	)

# Dc Komutu Ä°cin Olan Buttonlar
def d_or_c(user_id):
	BUTTON = [[InlineKeyboardButton(text="? DoÄŸruluk", callback_data = " ".join(["d_data",str(user_id)]))]]
	BUTTON += [[InlineKeyboardButton(text="?? Cesaret", callback_data = " ".join(["c_data",str(user_id)]))]]
	return InlineKeyboardMarkup(BUTTON)

# Dc Komutunu OluÅŸturalÄ±m
@K_G.on_message(filters.command("dc"))
async def _(client, message):
	user = message.from_user

	await message.reply_text(text="{} Ä°stediÄŸin Soru Tipini SeÃ§!".format(user.mention),
		reply_markup=d_or_c(user.id)
		)

# ButtonlarÄ±mÄ±zÄ± Yetkilendirelim
@K_G.on_callback_query()
async def _(client, callback_query):
	d_soru=random.choice(D_SORU) # Random Bir DoÄŸruluk Sorusu SeÃ§elim
	c_soru=random.choice(C_SORU) # Random Bir Cesaret Sorusu SeÃ§elim
	user = callback_query.from_user # KullanÄ±cÄ±n KimliÄŸini AlalÄ±m

	c_q_d, user_id = callback_query.data.split() # ButtonlarÄ±mÄ±zÄ±n KomutlarÄ±nÄ± AlalÄ±m

	# Sorunun SorulmasÄ±nÄ± Ä°steyen KiÅŸinin Komutu Kullanan KullanÄ±cÄ± Olup OlmadÄ±ÄŸÄ±nÄ± Kontrol Edelim
	if str(user.id) == str(user_id):
		# KullanÄ±cÄ±nÄ±n DoÄŸruluk Sorusu Ä°stemiÅŸ Ä°se Bu KÄ±sÄ±m CalÄ±ÅŸÄ±r
		if c_q_d == "d_data":
			await callback_query.answer(text="DoÄŸruluk Sorusu Ä°stediniz", show_alert=False) # Ä°lk Ekranda UyarÄ± Olarak GÃ¶sterelim
			await client.delete_messages(
				chat_id=callback_query.message.chat.id,
				message_ids=callback_query.message.message_id) # Eski MesajÄ± Silelim

			await callback_query.message.reply_text("**{user} DoÄŸruluk Sorusu Ä°stedi:** __{d_soru}__".format(user=user.mention, d_soru=d_soru)) # Sonra KullanÄ±cÄ±yÄ± Etiketleyerek Sorusunu GÃ¶nderelim
			return

		if c_q_d == "c_data":
			await callback_query.answer(text="Cesaret Sorusu Ä°stediniz", show_alert=False)
			await client.delete_messages(
				chat_id=callback_query.message.chat.id,
				message_ids=callback_query.message.message_id)
			await callback_query.message.reply_text("**{user} Cesaret Sorusu Ä°stedi:** __{c_soru}__".format(user=user.mention, c_soru=c_soru))
			return


	# Buttonumuza TÄ±klayan Kisi Komut CalÄ±ÅŸtÄ±ran KiÅŸi DeÄŸil Ä°se UyarÄ± GÃ¶sterelim
	else:
		await callback_query.answer(text="Komutu Kullanan KiÅŸi Sen DeÄŸilsin!!", show_alert=False)
		return


############################

K_G.run() # Botumuzu CalÄ±ÅŸtÄ±ralÄ±m :)
